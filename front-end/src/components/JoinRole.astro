---
import '../styles/main.css'

const apiUrl = import.meta.env.PUBLIC_API_URL
---

<div class="join-role-modal" id="joinRoleModal" data-api-url={apiUrl}>
    <div class="join-role-content">
        <h2 id="join-role-title">Rejoindre une partie</h2>
        <form id="joinRoleForm" autocomplete="off">
            <div class="input-group">
                <label for="username">Nom :</label>
                <input type="text" id="username" name="username" required placeholder="Entrez votre nom" />
            </div>

            <div class="section" id="roleChoice">
                <span>Choisissez un rÃ´le :</span>
                <div class="select-group">
                    <label class="select-button">
                        <input type="radio" name="role" value="player" checked />
                        <span>ðŸŽ® Joueur</span>
                    </label>
                    <label class="select-button">
                        <input type="radio" name="role" value="spectator" />
                        <span>ðŸ‘» Spectateur</span>
                    </label>
                </div>
            </div>

            <div class="section">
                <span>Choisissez une salle :</span>
                <div class="select-group">
                    <label class="select-button">
                        <input type="radio" name="roomAction" value="create" />
                        <span>âž• CrÃ©er une salle</span>
                    </label>
                    <label class="select-button selected">
                        <input type="radio" name="roomAction" required value="join" checked />
                        <span>ðŸ”‘ Rejoindre une salle</span>
                    </label>
                </div>
            </div>

            <div id="roomCodeField" class="input-group">
                <label for="roomCode">Code de la salle :</label>
                <input type="text" id="roomCode" name="roomCode" placeholder="ABCD1234" />
            </div>

            <button type="submit" class="btn btn-primary">VALIDER</button>
            <div id="loadingSpinner" class="spinner hidden"></div>
        </form>
    </div>
</div>
<div class="modal-backdrop" id="modalBackdrop"></div>

<script type="module" is:inline>
    // Utilitaires pour scroll et modale
    const lockBodyScroll = (lock) => {
        document.body.style.overflow = lock ? 'hidden' : ''
        document.body.style.touchAction = lock ? 'none' : ''
    }
    const hideModal = () => {
        document.getElementById('joinRoleModal')?.classList.add('hidden')
        document.getElementById('modalBackdrop')?.classList.add('hidden')
        lockBodyScroll(false)
    }
    const showSpinner = (show) => {
        document.getElementById('loadingSpinner')?.classList.toggle('hidden', !show)
    }

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('joinRoleForm')
        const roomCodeField = document.getElementById('roomCodeField')
        const modal = document.getElementById('joinRoleModal')
        const title = document.getElementById('join-role-title')
        const apiUrl = modal?.getAttribute('data-api-url') || ''
        const roleChoice = document.getElementById('roleChoice')

        if (modal && getComputedStyle(modal).display !== 'none') lockBodyScroll(true)

        // Met Ã  jour la classe 'selected' sur les labels radio
        function updateSelected(group) {
            form.querySelectorAll(`[name="${group}"]`).forEach((radio) => {
                radio.closest('.select-button')?.classList.toggle('selected', radio.checked)
            })
        }
        updateSelected('role')
        updateSelected('roomAction')
        form.querySelectorAll('[name=role]').forEach((radio) => {
            radio.addEventListener('change', () => updateSelected('role'))
        })
        form.querySelectorAll('[name=roomAction]').forEach((radio) => {
            radio.addEventListener('change', () => {
                updateSelected('roomAction')
                const join = form.querySelector('[name=roomAction]:checked')?.value === 'join'
                roomCodeField.style.display = join ? '' : 'none'
                title.textContent = join ? 'Rejoindre une partie' : 'CrÃ©er une partie'
                if (roleChoice) roleChoice.style.display = join ? '' : 'none'
            })
        })

        form.addEventListener('submit', async (e) => {
            e.preventDefault()
            const username = form.username.value.trim()
            const roomAction = form.roomAction.value
            const roomCode = form.roomCode.value.trim()
            const role = roomAction === 'create' ? 'host' : form.role.value || 'player'
            let createdRoomId = ''
            if (!username) return
            if (roomAction === 'create') {
                showSpinner(true)
                try {
                    const res = await fetch(`${apiUrl}/game/create`, { method: 'POST', credentials: 'include' })
                    createdRoomId = (await res.json()).room_id
                    showSpinner(false)
                    hideModal()
                } catch (err) {
                    showSpinner(false)
                    alert('Erreur lors de la crÃ©ation de la salle: ' + (err?.message || err))
                    return
                }
            } else {
                hideModal()
            }
            window.dispatchEvent(
                new CustomEvent('joinrole', {
                    detail: { username, role, roomAction, roomCode: roomCode.toLowerCase(), roomId: createdRoomId },
                })
            )
        })
        window.addEventListener('closeJoinRoleModal', hideModal)
    })
</script>

<style>
    .join-role-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1101;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgb(0 0 0 / 40%);
        z-index: 1100;
    }

    .join-role-content {
        background: #fdf6f0;
        border-radius: 16px;
        padding: 32px 24px;
        min-width: 320px;
        text-align: center;
        box-shadow: 0 8px 32px rgb(0 0 0 / 20%);
    }

    h2 {
        font-size: 1.6em;
        font-weight: bold;
        margin-bottom: 24px;
        color: #1e1e1e;
        display: flex;
        align-items: center;
        gap: 8px;
        justify-content: center;
    }

    .input-group,
    .section {
        margin-bottom: 18px;
        text-align: left;
    }

    label {
        font-weight: 500;
        display: block;
        margin-bottom: 6px;
        color: #333;
    }

    input[type='text'] {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 1em;
        box-sizing: border-box;
    }

    .select-group {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 12px;
        width: 100%;
    }

    .select-button {
        min-width: 0;
        width: 100%;
        box-sizing: border-box;
        padding: 12px;
        border-radius: 12px;
        border: 1px solid #ccc;
        background: #fff;
        cursor: pointer;
        font-weight: 600;
        font-size: 0.95em;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 6px;
        transition: background 0.2s ease;
        text-align: center;
    }

    .select-button > span {
        width: 100%;
        text-align: center;
        display: inline-block;
    }

    .select-button input {
        display: none;
    }

    .select-button:hover,
    .select-button.selected {
        background: #dbeafe;
        border-color: #60a5fa;
    }

    .btn-primary {
        width: 100%;
        padding: 12px;
        border-radius: 12px;
        border: none;
        background: linear-gradient(90deg, #007cf0, #005ecb);
        color: #fff;
        font-size: 1em;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.2s ease;
    }

    .btn-primary:hover {
        background: linear-gradient(90deg, #005ecb, #007cf0);
    }

    #roomCode {
        text-transform: uppercase;
    }

    .spinner {
        margin: 18px auto 0;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .hidden {
        display: none !important;
    }
</style>
