---
name: Package Docker Images

permissions:
  packages: write
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - "api/**"
      - "front-end/**"
      - ".devcontainer/**"
      - ".github/workflows/package-docker-images.yml"

jobs:
  build-docker-images:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: api
            context: ./api
            dockerfile: api/Dockerfile
            path_filter: api/
            build_args: ""
          - name: frontend
            context: ./front-end
            dockerfile: front-end/Dockerfile
            path_filter: front-end/
            build_args: |
              PUBLIC_API_URL=${{ secrets.PUBLIC_API_URL }}
          - name: devcontainer
            context: ./.devcontainer
            dockerfile: .devcontainer/Dockerfile
            path_filter: .devcontainer/
            build_args: |
              PUBLIC_API_URL=${{ secrets.PUBLIC_API_URL }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if build is needed
        id: check_changes
        run: |
          # Check if files in the component's directory were changed
          if git diff --name-only HEAD~1 HEAD | grep -q "^${{ matrix.path_filter }}" || \
             git diff --name-only HEAD~1 HEAD | grep -q "^\.github/workflows/package-docker-images\.yml"; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Extract version
        if: steps.check_changes.outputs.should_build == 'true'
        id: version
        run: |
          VERSION=$(date +%y.%m.%d.%H.%M)
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Normalize repository name
        if: steps.check_changes.outputs.should_build == 'true'
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Validate Dockerfile exists
        if: steps.check_changes.outputs.should_build == 'true'
        run: |
          test -f "${{ matrix.dockerfile }}" || (echo "Dockerfile not found at ${{ matrix.dockerfile }}" && exit 1)

      - name: Set up QEMU
        if: steps.check_changes.outputs.should_build == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: steps.check_changes.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.name }} image
        if: steps.check_changes.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: ${{ matrix.build_args }}
          tags: |
            ghcr.io/${{ steps.repo.outputs.name }}-${{ matrix.name }}:${{ steps.version.outputs.tag }}
            ghcr.io/${{ steps.repo.outputs.name }}-${{ matrix.name }}:latest
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}

      - name: Generate SBOM
        if: steps.check_changes.outputs.should_build == 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ steps.repo.outputs.name }}-${{ matrix.name }}:${{ steps.version.outputs.tag }}
          format: spdx-json
          upload-release-assets: false
          artifact-name: sbom-${{ matrix.name }}-${{ steps.version.outputs.tag }}
